package chapter14;
// демонстрация двух простых лямбда-выражений
// функциональный интерфейс
public interface MyValue {
    double getValue();
}
// еще один функциональный интерфейс
interface MyParamValue{
    double getValue(double v);
}
class LambdaDemo {
    public static void main(String[] args) {
        MyValue myVal; // объявление ссылки на интерфейс
        // Здесь лямбда-выражение - это просто константа
        // При его назначении переменной myVal создается
        // экземпляр класса, в котором лямбда-выражение
        // реализует метод getValue() интерфейса MyValue.
        myVal = () -> 98.6; // Простое лямбда-выражение
        // Вызвать метод getValue(), предоставляемый ранее
        // назначенным лямбда-выражением.
        System.out.println("Постоянное значение: " + myVal.getValue());
        // Создать параметризованное лямбда-выражение и назначить его
        // ссылке на экземпляр MyParamValue. Это лямбда-выражение
        // возвращает обратную величина своего аргумента.
        MyParamValue myPval = (n) -> 1.0 / n; // лямбда-выражение, имеющее параметр
        // Вызвать метод getValue(v) посредством ссылки myPval.
        System.out.println("Обратная величина 4 равна: " + myPval.getValue(4.0));
        System.out.println("Обратная величина 8 равна " + myPval.getValue(8.0));
        // Лямбда-выражение должно быть совместимым с методом,
        // который определяется функциональным интерфейсом. Поэтому
        // приведенные ниже два фрагмента кода не будут работать.
        // myVal = () -> "three"; // Ошибка! Тип String несовместим с типом double
        // myPval = () -> Math.random(); // Ошибка! Требуется параметр!
    }
}

